<?php
/**
 * @file
 * Farm eggs.
 */

/**
 * Implements hook_menu().
 */
function farm_eggs_menu() {

  // Produce safety dashboard.
  $items['farm/eggs'] = array(
    'title' => 'Eggs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_eggs_form'),
    'access arguments' => array('create farm_harvest log entities'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Form for adding egg harvest logs.
 */
function farm_eggs_form($form, &$form_state) {

  // Wrapper fieldset.
  $form['eggs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Record an egg harvest'),
    '#description' => t('Use this form to record an egg harvest. A harvest log will be created with standard details filled in.'),
  );

  // Load active groups.
  $groups = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'farm_asset');
  $query->entityCondition('bundle', 'group');
  $query->propertyCondition('active', TRUE);
  $query->propertyOrderBy('name', 'ASC');
  $result = $query->execute();
  if (isset($result['farm_asset'])) {
    $group_ids = array_keys($result['farm_asset']);
    $groups = entity_load('farm_asset', $group_ids);
  }

  // Build a list of group select options.
  $group_options = array();
  foreach ($groups as $group) {
    $group_options[$group->id] = entity_label('farm_asset', $group);
  }

  // If there are groups, add checkboxes.
  if (!empty($groups)) {
    $form['eggs']['group'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Group(s)'),
      '#description' => t('Select the group(s) that these eggs came from.'),
      '#options' => $group_options,
    );
  }

  // Quantity.
  $form['eggs']['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  // Submit button.
  $form['eggs']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save log'),
  );

  // Return the form.
  return $form;
}
/**
 * Submit function for egg form.
 */
function farm_eggs_form_submit($form, &$form_state) {

  // Create a new log entity.
  $log = entity_create('log', array('type' => 'farm_harvest'));

  // Create an entity wrapper for the log.
  $log_wrapper = entity_metadata_wrapper('log', $log);

  // Set log name.
  $log_name = t('Collected @qty egg(s)', array('@qty' => $form_state['values']['quantity']));
  $log_wrapper->name->set($log_name);

  // Set the date.
  $log_wrapper->timestamp->set(REQUEST_TIME);

  // If there are groups referenced, add them to the asset reference field.
  if (!empty($form_state['values']['group'])) {
    foreach ($form_state['values']['group'] as $group_id) {

      // Load the group.
      $group = farm_asset_load($group_id);

      // If it loaded, add it to the asset reference.
      if (!empty($group)) {
        $log_wrapper->field_farm_asset[] = $group;
      }
    }
  }

  // Create a new quantity field_collection entity attached to the log.
  $quantity = entity_create('field_collection_item', array('field_name' => 'field_farm_quantity'));
  $quantity->setHostEntity('log', $log);

  // Create an entity wrapper for the quantity.
  $quantity_wrapper = entity_metadata_wrapper('field_collection_item', $quantity);

  // Set the quantity measure.
  $quantity_wrapper->field_farm_quantity_measure->set('count');

  // Set the quantity value.
  $value_fraction = fraction_from_decimal($form_state['values']['quantity']);
  $quantity_wrapper->field_farm_quantity_value->numerator->set($value_fraction->getNumerator());
  $quantity_wrapper->field_farm_quantity_value->denominator->set($value_fraction->getDenominator());

  // Look up the units taxonomy term.
  $units = t('egg(s)');
  $units_terms = taxonomy_get_term_by_name($units, 'farm_quantity_units');

  // If terms were found, use the first one.
  if (!empty($units_terms)) {
    $units_term = reset($units_terms);
  }

  // If a term wasn't found, create it.
  else {
    $farm_units = taxonomy_vocabulary_machine_name_load('farm_quantity_units');
    $units_term = new stdClass();
    $units_term->name = check_plain($units);
    $units_term->vid = $farm_units->vid;
    taxonomy_term_save($units_term);
  }

  // Set the quantity units.
  $quantity_wrapper->field_farm_quantity_units = $units_term;

  // Mark the log as done.
  $log_wrapper->done->set(TRUE);

  // Set the log owner.
  global $user;
  $log_wrapper->field_farm_log_owner[] = $user;

  // Save the quantity.
  $quantity_wrapper->save();

  // Save the log.
  $log_wrapper->save();

  // Set a message.
  $label = entity_label('log', $log);
  $uri = entity_uri('log', $log);
  drupal_set_message(t('Log created') . ': ' . l($label, $uri['path']));
}
